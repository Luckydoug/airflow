import sys
sys.path.append(".")

#import libraries
import json
import psycopg2
import requests
import datetime
import pandas as pd
from datetime import date
from pangres import upsert, DocsExampleTable
from sqlalchemy import create_engine
from airflow.models import Variable
from pandas.io.json._normalize import nested_to_record 


from sub_tasks.data.connect import (pg_execute, pg_fetch_all, engine, pg_bulk_insert) 
from sub_tasks.api_login.api_login import(login)


# get session id
SessionId = login()
FromDate = '2018/01/01'
ToDate = date.today().strftime('%Y/%m/%d')

# FromDate = date.today().strftime('%Y/%m/%d')
# ToDate = date.today().strftime('%Y/%m/%d')

# api details
pagecount_url = f"https://10.40.16.9:4300/OpticaBI/XSJS/BI_API.xsjs?pageType=GetInsuranceSchemeDetails&pageNo=1&FromDate={FromDate}&ToDate={ToDate}&SessionId={SessionId}"
pagecount_payload={}
pagecount_headers = {}

def fetch_sap_insurance():

    pagecount_response = requests.request("GET", pagecount_url, headers=pagecount_headers, data=pagecount_payload, verify=False)
    data = pagecount_response.json()
    pages = data['result']['body']['recs']['PagesCount']

    insurance_detailsdf = pd.DataFrame()
    payload={}
    headers = {}
    for i in range(1, pages+1):
        page = i
        url = f"https://10.40.16.9:4300/OpticaBI/XSJS/BI_API.xsjs?pageType=GetInsuranceSchemeDetails&pageNo={page}&FromDate={FromDate}&ToDate={ToDate}&SessionId={SessionId}"
        response = requests.request("GET", url, headers=headers, data=payload, verify=False)
        insurance = response.json()
        stripped_insurance = insurance['result']['body']['recs']['Results']
        stripped_insurance_df = pd.DataFrame.from_dict(stripped_insurance)
        insurance_details = stripped_insurance_df['details'].apply(pd.Series)

        insurance_detailsdf = insurance_detailsdf.append(insurance_details, ignore_index=True) 
    
    '''
    INSERT THE INSURANCE TABLE
    '''
    insurance_detailsdf.rename (columns = {
        'Code':'id',
        'DocEntry':'doc_entry',
        'UserSign':'user_signature',
        'CreateDate':'create_date',
        'CreateTime':'create_time',
        'UpdateDate':'update_date',
        'UpdateTime':'update_time',
        'Company_Code':'insurance_code',
        'ComapnyName':'insurance_name'}
    ,inplace=True)

    insurance_detailsdf = insurance_detailsdf.set_index('id')

    upsert(engine=engine,
       df=insurance_detailsdf,
       schema='mabawa_staging',
       table_name='source_insurance_company',
       if_row_exists='update',
       create_table=False)

    #insurance_detailsdf.to_sql('source_insurance_company', con = engine, schema='mabawa_staging', if_exists = 'append', index=False)


    '''
    INSERT THE INSURANCE PLAN TABLE
    '''

    insurance_itemdetails = stripped_insurance_df['itemdetails'].apply(pd.Series)
    cols= len(insurance_detailsdf.columns)
    insurance_itemdetails_df = pd.DataFrame()
    for i in range(1, cols):
        df = insurance_itemdetails[str(i)].apply(pd.Series)
        insurance_itemdetails_df = insurance_itemdetails_df.append(df, ignore_index=True) 

    insurance_itemdetails_df.drop([0], axis=1, inplace=True)
    
    insurance_itemdetails_df.rename (columns = {
        'Code':'insurance_id',
        'LineId':'plan_id',
        'Scheme_Name':'plan_scheme_name',
        'Start_Date':'start_date',
        'EndDate':'end_date',
        'Status':'plan_status',
        'Initial_Status_for_Insur':'plan_initial_status',
        'Scheme_Type':'plan_scheme_type',
        'Copay':'plan_copay',
        'CopayPercentage':'plan_copay_percent',
        'Opht_Pres_Required':'plan_opht_pre_required',
        'Total_Limit':'plan_limit',
        'Frame_Limit':'plan_frame_limit',
        'Lens_Limit':'plan_lens_limit',
        'Dependents_Covered':'plan_dependents',
        'Plano_Rx':'plan_rx',
        'PhotoTrans_Lenses':'plan_phototrans_lenses',
        'Anti_Glare':'plan_anti_glare',
        'Colored_CL':'plan_colored_cl',
        'Rx_CL':'plan_rx_cl',
        'Sunglasses':'plan_sunglasses',
        'Preauth_Validity':'plan_preauth_validity',
        'Approval_Validity':'plan_approval_validity',
        'Smart_Validity_period':'plan_smart_validity_period',
        'Out_Patient_Overall':'plan_out_patient',
        'Comments':'plan_comments',
        'PreAuth_mandatory':'plan_preauth_mandatory',
        'Claim_mandatory':'plan_claim_mandatory',
        'OutsideRx_mandatory':'plan_Outsiderx_mandatory',
        'MedicalId_mandatory':'plan_decalid_mandatory',
        'SMART_mandatory':'plan_smart_mandatory',
        'FeedBkForm_mandatory':'plan_feedbkform_mandatory',
        'WordDoc_mandatory':'plan_worddoc_mandatory',
        'HoldDays_BefAprvl':'plan_holddays_befoaprvl',
        'HoldDays_AftrAprvl':'plan_holddays_aftraprvl',
        'Check_Our_Limit':'plan_check_our_limits',
        'Scheme_Active':'plan_scheme_active',
        'Slade_Schemes':'plan_slade_schemes',
        'Approval_mandatory':'plan_approval_mandatory'}
    ,inplace=True)

    insurance_itemdetails_df.to_sql('source_insurance_plan', con = engine, schema='mabawa_staging', if_exists = 'append', index=False)

    return "insert insurance company plan"


